
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;
import "gameObejct.sol";

// This is class that describes you smart contract.
contract gameObejctImp is gameObejct {
      
    //здоровье
    uint public health = 5;
    // адрес нападоющего
    uint addressenemy;

    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();
    }

    modifier checkOwnerAndAccept {
		// Check that message was signed with contracts key.
		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
		_;
	}

    // принять атаку определить жив ли и подсчет здлровья
    function addAtac(uint power) public override checkOwnerAndAccept{
        addressenemy = msg.pubkey();
        health = health - power;
    } 

     // получить силу защиты
    function addProtection(uint pow) public virtual checkOwnerAndAccept{
        health = health + pow;
    }
    // проверка на смерть
    function death() private checkOwnerAndAccept returns(bool b){
         return health <=0;
    }
    //обработка гибели
    function processingdeath() public virtual checkOwnerAndAccept{
        if( death()==true){
        sendValue(address(addressenemy), 0, true);}
    }

    //отправка всех денег атакующему и уничтожение.
    function sendValue(address dest, uint128 amount, bool bounce) public view  checkOwnerAndAccept{
        dest.transfer(0, bounce, 160);
    }
}
